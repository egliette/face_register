name: CI Pipeline

on:
  push:
    branches-ignore:
      - develop
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: "3.11"
  # MinIO
  MINIO_ENDPOINT: minio:9000
  MINIO_ACCESS_KEY: YOUR_ACCESS_KEY
  MINIO_SECRET_KEY: YOUR_SECRET_KEY
  MINIO_SECURE: "false"
  SCRFD_BUCKET: models
  SCRFD_MODEL_OBJECT: scrfd/scrfd_640x640_kps.onnx
  ARCFACE_BUCKET: models
  ARCFACE_MODEL_OBJECT: arcface/arcface_r100_glint360k.onnx
  YOLO_PERSON_BUCKET: models
  YOLO_PERSON_MODEL_OBJECT: yolo-person/yolov8n_person.onnx
  # Database
  POSTGRES_DB: face_register
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  DATABASE_URL: postgresql://user:password@postgres:5432/face_register
  # API
  API_PREFIX: /api
  PROJECT_NAME: "Face Register API"
  FRONTEND_URL: http://localhost:3000
  ADMIN_PANEL_URL: http://localhost:8080
  # Qdrant
  QDRANT_URL: http://qdrant:6333
  QDRANT_COLLECTION: face_embeddings
  QDRANT_VECTOR_SIZE: "512"
  # Logging
  SERVICE_NAME: face_register
  LOG_DIR: logs
  LOG_TO_STDOUT: "true"
  LOG_LEVEL: INFO
  LOG_MAX_DAYS: "33"
  # Container user mapping
  APP_UID: "1000"
  APP_GID: "1000"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
        pip install black isort

    - name: Check import sorting with isort
      run: |
        isort --profile=black --check-only --diff app/

    - name: Check code formatting with Black
      run: |
        black --check --diff app/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        docker compose -f docker-compose.test.yml build app_test

    - name: Create network
      run: |
        docker network create person_detection || true

    - name: Start dependencies
      run: |
        docker compose -f docker-compose.test.yml up -d postgres minio

    - name: Run database migrations
      run: |
        docker compose -f docker-compose.test.yml run --rm db_migrate

    - name: Run tests
      run: |
        docker compose -f docker-compose.test.yml up --exit-code-from app_test app_test

    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v
        docker network rm person_detection || true
