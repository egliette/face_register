name: CI Pipeline

on:
  push:
    branches: [ main, develop, '**' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_DB: face_register
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/face_register
  MINIO_ENDPOINT: localhost:9000
  MINIO_ACCESS_KEY: minioadmin
  MINIO_SECRET_KEY: minioadmin
  MINIO_SECURE: "false"
  SCRFD_BUCKET: models
  SCRFD_MODEL_OBJECT: scrfd_10g_bnkps.onnx
  ARCFACE_BUCKET: models
  ARCFACE_MODEL_OBJECT: w600k_r50.onnx
  API_PREFIX: /api/v1
  PROJECT_NAME: Face Register
  FRONTEND_URL: http://localhost:3000
  ADMIN_PANEL_URL: http://localhost:3001

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
        pip install black isort

    - name: Check import sorting with isort
      run: |
        isort --profile=black --check-only --diff src/ tests/

    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        docker build -t face-register:test --target test .

    - name: Create network
      run: |
        docker network create person_detection || true

    - name: Start test services
      run: |
        docker-compose -f docker-compose.test.yml up -d postgres minio

    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until docker exec face_register_postgres_test pg_isready -U postgres -d face_register_test; do sleep 2; done'

    - name: Run tests
      run: |
        docker-compose -f docker-compose.test.yml run --rm app_test pytest -v -m "not model_dependent"

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v
        docker network rm person_detection || true
